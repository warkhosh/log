<?php

namespace Project\Lib;

use Throwable;

/**
 * Example of application in your project
 *
 * @package Project\Lib
 */
class Log extends AppLog implements LogInterface
{
	/**
     * @var int|null
     */
    const MAX_SIZE_IN_BYTES = ((1024 * 1024) * 25);

	/**
     * AppLog constructor
     *
     * @param string $path
     */
    public function __construct()
    {
        $setting = getConfig('config.log', []);

		if (key_exists('dir', $setting)) {
			$this->setPath($setting['dir']);
		}

		if (key_exists('mode', $setting)) {
			$this->setMode($setting['mode']);
		}

		$this->mode = self::STAGE;
    }

    /**
     * Example to handle the received exception
     *
     * @param Throwable|array|string $arg
     * @return array
     */
    static public function getParams($arg = null)
    {
        // Here you can define and pass your parameters for more flexibility in the project
        // $customValue = "some meaning";

        // Handle received exception
        if ($arg instanceof Throwable) {
            return [
                "log"   => $arg->getMessage(),
                "code"  => $arg->getCode(),
                "file"  => $arg->getFile() . ($arg->getLine() > 0 ? "(" . $arg->getLine() . ")" : ''),
                "line"  => $arg->getLine(),
                "trace" => $arg->getTraceAsString(),
                // "custom_field" => $customValue,
            ];
        }

        $arg = is_array($arg) ? $arg : (array)$arg;

        // $arg['custom_field'] = $customValue;

        return AppLog::getParams($arg);
    }
}